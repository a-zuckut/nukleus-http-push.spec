#
# Copyright 2016-2017 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property nuklei ${nuklei:directory("target/nukleus-itests").streamsCapacity(1024 * 1024, 64 * 1024)}

property targetInput ${nuklei.streams("target", "http-push#source")}
property targetOutputEst ${nuklei.streams("http-push", "target")}

property newTargetOutputEstId ${nuklei:newStreamId()}
property newTargetOutputEstId2 ${nuklei:newStreamId()}

connect await ROUTED_INPUT
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(targetInput.buffer)}
        option writer ${agrona:oneToOneWriter(targetInput.throttle)}
connected

read [0x00 0x00 0x00 0x01]
     ([0..8]:targetInputId)
     ([0..8]:targetInputRef)
     ([0..8]:targetCorrelationId)
     [0x00] [0x07] ":scheme" [0x04] "http"
     [0x00] [0x07] ":method" [0x03] "GET"
     [0x00] [0x05] ":path" [0x05] "/data"
     [0x00] [0x0a] ":authority" [0x0e] "localhost:8080"
     [0x00] [0x0f] "x-poll-interval" [0x01] "2"

read notify HTTP_REQUEST_RECEIVED

write [0x40 0x00 0x00 0x02]
      ${targetInputId}
      [0x00 0x02 0x00 0x00]
write flush

read [0x00 0x00 0x00 0x01]
     ([0..8]:targetInputId2)
     ([0..8]:targetInputRef2)
     ([0..8]:targetCorrelationId2)
     [0x00] [0x07] ":scheme" [0x04] "http"
     [0x00] [0x07] ":method" [0x03] "GET"
     [0x00] [0x05] ":path" [0x05] "/data"
     [0x00] [0x0a] ":authority" [0x0e] "localhost:8080"
     [0x00] [0x0f] "x-poll-interval" [0x01] "2"

read notify HTTP_REQUEST_RECEIVED2

write [0x40 0x00 0x00 0x02]
      ${targetInputId2}
      [0x00 0x02 0x00 0x00]
write flush

close
closed

connect await ROUTED_OUTPUT
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(targetOutputEst.throttle)}
        option writer ${agrona:oneToOneWriter(targetOutputEst.buffer)}
connected

write await HTTP_REQUEST_RECEIVED

### Response to first request

write [0x00 0x00 0x00 0x01]
      ${newTargetOutputEstId}
      [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
      ${targetCorrelationId}
      [0x00] [0x07] ":status" [0x03] "200"
      [0x00] [0x0e] "content-length" [0x02] "11"
write flush

read [0x40 0x00 0x00 0x02]
     ${newTargetOutputEstId}
     [0..4]

write [0x00 0x00 0x00 0x02]
      ${newTargetOutputEstId}
      [0x00 0x0b]
      "hello world"
write flush

read [0x40 0x00 0x00 0x02]
     ${newTargetOutputEstId}
     [0x00 0x02 0x00 0x00]

write await HTTP_REQUEST_RECEIVED2

### Response to second request

write [0x00 0x00 0x00 0x01]
      ${newTargetOutputEstId2}
      [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
      ${targetCorrelationId2}
      [0x00] [0x07] ":status" [0x03] "200"
      [0x00] [0x0e] "content-length" [0x02] "12"
write flush

read [0x40 0x00 0x00 0x02]
     ${newTargetOutputEstId2}
     [0..4]

write [0x00 0x00 0x00 0x02]
      ${newTargetOutputEstId2}
      [0x00 0x0e]
      "hello world2"
write flush

read [0x40 0x00 0x00 0x02]
     ${newTargetOutputEstId2}
     [0x00 0x02 0x00 0x00]

close
closed
